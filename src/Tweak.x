#import <Foundation/Foundation.h>
#import <objc/runtime.h>
#import <substrate.h>
#import <CustomURLProtocol.h>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"

#define EXPECTED_ITUNESSTOREUI_LOCATION 0x37e53000
static void* dyld_shared_cache_offset = 0;

#include <mach-o/dyld.h>
%ctor {
    uint32_t numImages = _dyld_image_count();
    NSMutableArray* headers = [NSMutableArray arrayWithCapacity:numImages];
    for (uint32_t i = 0; i < numImages; ++i) {
        const struct mach_header* header = _dyld_get_image_header(i);
        const char* name = _dyld_get_image_name(i);
        if (strcmp(name, "/System/Library/PrivateFrameworks/iTunesStoreUI.framework/iTunesStoreUI") == 0) {
            dyld_shared_cache_offset = (void*)header - EXPECTED_ITUNESSTOREUI_LOCATION;
            NSLog(@"dyld_shared_cache offset: %p", dyld_shared_cache_offset);
        }
        [headers addObject:[NSString stringWithFormat:@"%s: %p", name, header]];
    }
    NSLog(@"%@", [headers componentsJoinedByString:@"\n"]);
}

static NSString* outputDictionary(NSDictionary* inputDict) {
    NSMutableString * outputString = [NSMutableString stringWithCapacity:256];
    NSArray * allKeys = [inputDict allKeys];

    for (NSString * key in allKeys) {
        if ([[inputDict objectForKey:key] isKindOfClass:[NSDictionary class]]) {
            [outputString appendString: outputDictionary((NSDictionary *)inputDict)];
        }
        else {
            [outputString appendString: key];
            [outputString appendString: @": "];
            [outputString appendString: [[inputDict objectForKey: key] description]];
        }
        [outputString appendString: @"\n"];
    }
    return [NSString stringWithString: outputString];
}

@class SSURLBagContext, SSNetworkConstraints;

@interface ISURLBag : NSObject
/*
{
	SSURLBagContext* _context;
	SSNetworkConstraints* _defaultConstraints;
	NSDictionary* _dictionary;
	NSArray* _guidPatterns;
	NSSet* _guidSchemes;
	NSDictionary* _headerPatterns;
	double _invalidationTime;
	BOOL _loadedFromDiskCache;
}
-(NSDictionary *)URLBagDictionary;
-(void)_setDictionary:(id)arg1 ;
-(NSArray*)_copyGUIDPatternsFromDictionary:(id)arg1 ;
-(NSSet*)_copyGUIDSchemesFromDictionary:(id)arg1 ;
-(NSDictionary*)_copyHeaderPatternsFromDictionary:(id)arg1 ;
-(BOOL)loadFromDictionary:(NSDictionary*)outputBag returningError:(id*)err;
-(id)initWithRawDictionary:(NSDictionary*)outputBag;
*/
@end

#include <float.h>

%hook ISCertificate

/*
-(BOOL)isValid {
    NSLog(@"Swizzling [ISCertificate isValid]");
    return YES;
}
*/

-(BOOL)checkData:(id)arg1 againstSignature:(id)arg2 {
    NSLog(@"Forcing [ISCertificate checkData:againstSignature:] to pass");
    return YES;
}

/*
-(BOOL)checkData:(id)arg1 againstAppleSignature:(id)arg2 {
    NSLog(@"Swizzling [ISCertificate checkData:againstAppleSignature:]");
    return YES;
}
*/

%end

%hook ISURLBag

static void coredump_ISURLBag(NSString* cls, NSString* msg) {
    NSLog(@"%@ %@\n%@", cls, msg, [NSThread.callStackSymbols componentsJoinedByString:@"\n"]);
}

static void getSelector(long unslid_addr) {
    return NSLog(@"%p: %s", (void*)unslid_addr, sel_getName(*(SEL*)(unslid_addr + dyld_shared_cache_offset)));
}

static void getClass(long unslid_addr) {
    return NSLog(@"%p: %s", (void*)unslid_addr, class_getName(*(Class*)(unslid_addr + dyld_shared_cache_offset)));
}

static void getNSString(long unslid_addr) {
    return NSLog(@"%p: %@", (void*)unslid_addr, (__bridge NSString *)(unslid_addr + dyld_shared_cache_offset));
}

/*
+ (BOOL) _allowUnsignedBags {
    return YES;
}
*/

- (BOOL) _loadFromSignedDictionary:(NSDictionary*)outputBag returningError:(id*)err {
    NSLog(@"Swizzling [ISURLBag _loadFromSignedDictionary:returningError:]");
    
    return %orig;
}

%end

%hook ISLoadURLBagOperation

- (void)operation:(id)operation willSendRequest:(NSMutableURLRequest *)request {
    NSLog(@"[ISLoadURLBagOperation operation:willSendRequest:] for %@", [[request URL] absoluteString]);
    
    %orig;
}

-(void)operation:(id)operation finishedWithOutput:(NSDictionary*)outputBag {
    NSLog(@"Received bag as dictionary:\n%@", outputDictionary(outputBag));
    
    
    char buf[] = {0x30, 0x82, 0x03, 0x46, 0x30, 0x82, 0x02, 0x2e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x04, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x7e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0c, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x31, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x11, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x75, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x33, 0x30, 0x35, 0x33, 0x31, 0x30, 0x32, 0x31, 0x30, 0x31, 0x35, 0x5a, 0x17, 0x0d, 0x31, 0x38, 0x30, 0x35, 0x33, 0x30, 0x30, 0x32, 0x31, 0x30, 0x31, 0x35, 0x5a, 0x30, 0x81, 0x81, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0c, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x31, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x14, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x42, 0x61, 0x67, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x75, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xa5, 0xe3, 0x30, 0x43, 0xc9, 0xf6, 0xfb, 0xe2, 0x3d, 0xc0, 0xad, 0x8b, 0xf2, 0xf5, 0x5f, 0xfe, 0xe6, 0xbe, 0xff, 0x25, 0xd3, 0xd0, 0x7a, 0xc4, 0x48, 0x7e, 0x47, 0xab, 0x07, 0x8b, 0xbf, 0x24, 0xa4, 0xed, 0x98, 0x6a, 0x7e, 0x61, 0xba, 0x3a, 0xb7, 0x01, 0xa0, 0x80, 0x0e, 0x78, 0x05, 0x32, 0x03, 0x1f, 0xe0, 0x46, 0x9b, 0xae, 0x81, 0xa5, 0xa7, 0x36, 0x6a, 0xf1, 0x9a, 0xd9, 0xdf, 0xd9, 0x7f, 0xf7, 0x04, 0x82, 0x60, 0xfe, 0x69, 0x5a, 0xca, 0xad, 0xbe, 0x5b, 0x14, 0x59, 0xf0, 0x51, 0x71, 0x90, 0x4c, 0x4a, 0x5b, 0xaa, 0xe3, 0xa0, 0xa4, 0xad, 0xa8, 0x91, 0x00, 0xa8, 0xa6, 0x15, 0xd4, 0x24, 0x1e, 0x94, 0x43, 0x63, 0xfc, 0x6f, 0x8f, 0xbb, 0x2c, 0x92, 0x51, 0x93, 0xfd, 0xde, 0x84, 0xac, 0x9f, 0x53, 0xe3, 0x14, 0xdc, 0x3f, 0xb3, 0xbf, 0xaf, 0x29, 0x80, 0xcb, 0x63, 0x9f, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x4f, 0x30, 0x4d, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xf4, 0xc9, 0x9f, 0x58, 0xef, 0xe2, 0xdf, 0x03, 0x0c, 0xbf, 0xc7, 0x4b, 0x62, 0x7a, 0xb3, 0x4c, 0x3b, 0xfd, 0x4e, 0xd6, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xb0, 0xda, 0xe1, 0x7f, 0xa8, 0x8b, 0x4a, 0x6a, 0x81, 0x5d, 0x0c, 0xa1, 0x84, 0x56, 0x46, 0x1e, 0x6a, 0xef, 0xe5, 0xcf, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x54, 0x57, 0xbf, 0xf3, 0x90, 0x54, 0x6a, 0xba, 0x3d, 0xcd, 0x9e, 0xa4, 0x91, 0xbd, 0xa3, 0x3e, 0xbe, 0xdd, 0x96, 0x8a, 0xd8, 0x0c, 0xa1, 0x95, 0xa5, 0xdd, 0xca, 0x63, 0x2e, 0xd8, 0x4c, 0x43, 0x4b, 0x05, 0x3d, 0xbc, 0x81, 0xe6, 0xae, 0xc6, 0x65, 0xe5, 0xbc, 0x9c, 0x35, 0x67, 0xb2, 0x54, 0xaa, 0x49, 0x24, 0xd1, 0x5b, 0xcc, 0x3c, 0x28, 0x9d, 0x30, 0x67, 0x7e, 0xb8, 0x86, 0xf9, 0x1f, 0xc6, 0x51, 0x12, 0xb8, 0xf1, 0x34, 0xfd, 0xfc, 0x41, 0x84, 0x26, 0x89, 0x5b, 0xf6, 0x72, 0x54, 0x91, 0x0e, 0xdb, 0xa2, 0xd3, 0x24, 0x7d, 0xde, 0xe5, 0x7b, 0x25, 0x3c, 0xc1, 0xb5, 0x11, 0x82, 0x04, 0x63, 0xc7, 0xa8, 0xe5, 0x56, 0x60, 0xb8, 0x0d, 0x99, 0x5b, 0x56, 0xd5, 0xf4, 0x41, 0x3e, 0x37, 0xb3, 0x19, 0xa1, 0x96, 0x55, 0x60, 0x53, 0xed, 0x8f, 0x62, 0xd6, 0xf1, 0xc2, 0xd9, 0xb5, 0x3f, 0x1e, 0xe5, 0x28, 0x99, 0x62, 0x72, 0xec, 0xee, 0x25, 0x47, 0x71, 0x4c, 0x9d, 0x3c, 0x2d, 0x64, 0x00, 0x76, 0x3c, 0x2c, 0xa1, 0x07, 0xce, 0x56, 0xd9, 0x23, 0xea, 0xc4, 0x5b, 0x40, 0xe0, 0x76, 0x2e, 0x3d, 0x9b, 0x93, 0x0c, 0x91, 0x5a, 0xd2, 0x8d, 0x81, 0xd9, 0x5c, 0x4e, 0x4d, 0x3c, 0xcb, 0xbe, 0x8c, 0xa3, 0xfa, 0x61, 0x69, 0x13, 0x3b, 0x12, 0x4b, 0x73, 0x5f, 0xba, 0x96, 0x9b, 0xa5, 0xa9, 0xc9, 0xa1, 0x53, 0xfc, 0x01, 0x68, 0xcc, 0xe8, 0x84, 0x5d, 0x7c, 0xe9, 0xe6, 0x82, 0xd4, 0x1e, 0x1f, 0xc1, 0x7f, 0x79, 0xbb, 0x22, 0x62, 0x41, 0x0e, 0xe6, 0xdb, 0xa2, 0xdb, 0x75, 0x74, 0x33, 0x65, 0x15, 0x17, 0x12, 0x8e, 0x0a, 0xe0, 0xda, 0x4c, 0xf8, 0xae, 0xef, 0xda, 0xb2, 0x64, 0xe2, 0x76, 0xb5, 0x45, 0xe0, 0x7e, 0x60, 0x05, 0xec, 0x88, 0x43, 0xae, 0xfe, 0x92, 0xd3};
    NSData* data = [NSData dataWithBytes:buf length:sizeof(buf)];
    NSArray* certs = [[NSArray alloc] initWithObjects:data, nil];
    
    
    NSMutableDictionary* editableBag = [[NSMutableDictionary alloc] initWithDictionary:outputBag];
    [editableBag setValue:certs forKey:@"certs"];
    //[editableBag removeObjectForKey:@"signature"];
    NSDictionary* swizzledBag = [[NSDictionary alloc] initWithDictionary:editableBag];
    
    NSLog(@"Swizzled bag:\n%@", outputDictionary(swizzledBag));
    %orig(operation, swizzledBag);
    
    //%orig;
}

%end


%hook NSURLRequest

static void RegisterCustomURLProtocol() {
    [NSURLProtocol registerClass:[CustomURLProtocol class]];
}

__attribute__((constructor))
static void init_hook() {
    RegisterCustomURLProtocol();
}

+(NSURLRequest *)requestWithURL:(NSURL *)URL {
    NSLog(@"[NSURLRequest requestWithURL:] for %@", [URL absoluteString]);
    return %orig;
}

-(NSURLRequest *)initWithURL:(NSURL *)URL {
    NSLog(@"[NSURLRequest initWithURL:] for %@", [URL absoluteString]);
    return %orig;
}

+(NSURLRequest *)requestWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval {
    NSLog(@"[NSURLRequest requestWithURL:cachePolicy:timeoutInterval:] for %@", [URL absoluteString]);
    return %orig;
}

-(NSURLRequest *)initWithURL:(NSURL*)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval {
    NSLog(@"[NSURLRequest initWithURL:cachePolicy:timeoutInterval:] for %@", [URL absoluteString]);
    return %orig;
}

%end

#include <Foundation/NSOperation.h>
@interface ISOperation : NSOperation
@end

%hook ISOperation

static void coredump_ISOperation(NSString* cls, NSString* msg) {
    NSLog(@"%@ %@\n%@", cls, msg, [NSThread.callStackSymbols componentsJoinedByString:@"\n"]);
}

-(id)init {
    coredump_ISOperation(NSStringFromClass([self class]), @"initializer called");
    return %orig;
}

-(void)setError:(NSError*)error {
    coredump_ISOperation(NSStringFromClass([self class]), [error localizedDescription]);
    %orig;
}

%end

%hook ISOpenURLRequest

-(id)initWithURL:(NSURL*)URL {
    NSLog(@"[ISOpenURLRequest initWithURL:] for %@", [URL absoluteString]);
    return %orig;
}

-(void)setURL:(NSURL*)URL {
    NSLog(@"[ISOpenURLRequest setURL:] for %@", [URL absoluteString]);
    return %orig;
}

%end

%hook SULoadNetworkSectionsOperation

-(SULoadNetworkSectionsOperation*)initWithURL:(NSURL*)URL clientInterface:(id /* SUClientInterface* */)clientInterface {
    NSLog(@"[SULoadNetworkSectionsOperation initWithURL:clientInterface:] for %@", [URL absoluteString]);
    return %orig;
}

%end

@interface ISURLOperation : ISOperation
@end

%hook ISURLOperation

-(void)setRequest:(NSURLRequest*)request {
    NSLog(@"[ISURLOperation setRequest:] for %@", [[request URL] absoluteString]);
    %orig;
}

-(NSURLRequest*)newRequestWithURL:(NSURL*)URL {
    NSURLRequest* request = %orig;
    NSLog(@"[ISURLOperation newRequestWithUrl:] for %@ has headers:\n%@",
    [URL absoluteString], outputDictionary([request allHTTPHeaderFields]));
    return request;
}

-(BOOL)_runRequestWithURL:(NSURL*)URL {
    NSString *origURL = [URL absoluteString];
    NSString *urlString = origURL;
    NSLog(@"[ISURLOperation runRequestWithUrl:] called for %@", origURL);
    
    if ([urlString rangeOfString:@"ax.init.itunes.apple.com"].location != NSNotFound) {
        NSLog(@"Attempting to replace ax.init.itunes.apple.com");
        urlString = [urlString stringByReplacingOccurrencesOfString:@"ax.init.itunes.apple.com" withString:@"init.itunes.apple.com"];
    }
    
    if ([urlString rangeOfString:@"phobos.apple.com"].location != NSNotFound) {
        NSLog(@"Attempting to replace phobos.apple.com");
        urlString = [urlString stringByReplacingOccurrencesOfString:@"phobos.apple.com" withString:@"init.itunes.apple.com"];
    }
    
    /*
    // Enable this to cause the updates page to be blank instead of give "Cannot connect to iTunes store"
    if ([urlString rangeOfString:@"WebObjects/MZSoftwareUpdate.woa/wa/viewSoftwareUpdates"].location != NSNotFound) {
        NSLog(@"Attempting to replace WebObjects/MZSoftwareUpdate.woa/wa/viewSoftwareUpdates");
        urlString = [urlString stringByReplacingOccurrencesOfString:@"WebObjects/MZSoftwareUpdate.woa/wa/viewSoftwareUpdates" withString:@""];
    }
    */

    NSURL *newURL = [NSURL URLWithString:urlString];
    NSLog(@"[ISURLOperation runRequestWithUrl:] swizzled to %@", newURL);

    return %orig(newURL);
}

-(void)_handleReceivedResponse:(NSHTTPURLResponse*)response {
    NSLog(@"[ISURLOperation _handleReceivedResponse:] for %@ with status %ld", [[response URL] absoluteString], (long)[response statusCode]);
    return %orig;
}

%end

/*
@interface ISStoreURLOperation : ISURLOperation
-(id)_resolvedURL;
@end
*/

%hook ISStoreURLOperation

+(id)pingOperationWithUrl:(NSURL*)URL {
    NSLog(@"[ISStoreURLOperation pingOperationWithUrl:] for %@", [URL absoluteString]);
    return %orig;
}

-(id)_resolvedURLInBagContext:(SSURLBagContext*)context URLBag:(id*)bag {
    NSURL* result = %orig;
    NSLog(@"[ISStoreURLOperation _resolvedURLInBagContext:URLBag:] yields %@", [result absoluteString]);
    return result;
}

-(id)newRequestWithURL:(NSURL*)URL {
    NSLog(@"[ISStoreURLOperation newRequestWithURL:] for %@", [URL absoluteString]);
    return %orig;
}

-(NSURL*)_urlFromURLBagForRequestProperties:(id)properties inBagContext:(SSURLBagContext*)context {
    NSURL* result = %orig;
    NSLog(@"[ISStoreURLOperation _urlFromURLBagForRequestProperties:inBagContext:] yields %@", [result absoluteString]);
    return result;
}

/*
-(void)run {
    NSLog(@"ISStoreURLOperation with resolved URL %@", [[self _resolvedURL] absoluteString]);
    %orig;
}
*/

%end

%hook UIAlertView

static void coredump_UIAlertView(NSString* msg) {
    NSLog(@"%@\n%@", msg, [NSThread.callStackSymbols componentsJoinedByString:@"\n"]);
}

-(UIAlertView*)initWithTitle:(NSString*)title message:(NSString*)message delegate:(id)delegate cancelButtonTitle:(NSString*)cancelButtonTitle otherButtonTitles:(NSString*)otherButtonTitles, ... {
    coredump_UIAlertView(@"UIAlertView init from message!");
    return %orig;
}

-(id)initWithFrame:(CGRect)frame {
    coredump_UIAlertView(@"UIAlertView init from frame!");
    return %orig;
}

-(UIAlertView*)initWithCoder:(NSCoder*)coder {
    coredump_UIAlertView(@"UIAlertView init from coder!");
    return %orig;
}

%end

#pragma GCC diagnostic pop
